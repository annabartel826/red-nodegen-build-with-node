<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/x-red" data-template-name="ui_{{&nodeName}}">
    <div class="form-row" id="template-row-group">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row" id="template-row-size">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>

<script type="text/x-red" data-help-name="ui_{{&nodeName}}">
    <p>The template widget can contain any valid html and Angular/Angular-Material directives.</p>
    <p>This node can be used to create a dynamic user interface element that changes its appearence
    based on the input message and can send back messages to Node-RED.</p>
    <b>For example:</b><br>
    <pre>&lt;div layout=&quot;row&quot; layout-align=&quot;space-between&quot;&gt;
    &lt;p&gt;The number is&lt;/p&gt;
    &lt;p ng-style=&quot;{color: (msg.payload || 0) % 2 === 0 ? 'green' : 'red'}&quot;&gt;
        {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}
    &lt;/p&gt;
&lt;/div&gt;</pre>
    Will display if the number received as <code>msg.payload</code> is even or odd. It will also
    change the color of the text to green if the number is even or red if odd.<br><br>
    <b>Sending a message:</b><br>
    <pre>&lt;script&gt;
var value = "hello world";
// or overwrite value in your callback function ...
this.scope.action = function() { return value; }
&lt;/script&gt;
&lt;md-button ng-click=&quot;send({payload:action()})&quot;&gt;
    Click me to send a hello world
&lt;/md-button&gt;</pre>
    Will display a button that when clicked will send a message with the payload <code>'Hello world'</code>.
    </p><br>
    <b>Using <code>msg.template</code>:</b><br>
    <p>You can also define the template content via <code>msg.template</code>, so you can use external files for example.<br>
    Template will be reloaded on input if it has changed.<br>
    Code written in the Template field will be ignored when <code>msg.template</code> is present.</p>
</script>

<script type="text/javascript">
    function mk_conf(NAME) {

        var TEMPLATE_SCOPE = "{{&template_scope}}";
        var ICON = "icon.png";

        var conf = {
            category: 'dashboard',
            color: 'rgb( 63, 173, 181)',
            defaults: {
                group: {type: 'ui_group', required:false},
                name: {value: ''},
                order: {value: 0},
                width: {value: 0, validate: function(v) {
                        var valid = true
                        if (TEMPLATE_SCOPE !== 'global') {
                            var width = v||0;
                            var currentGroup = $('#node-input-group').val()||this.group;
                            var groupNode = RED.nodes.node(currentGroup);
                            valid = !groupNode || +width <= +groupNode.width;
                            $("#node-input-size").toggleClass("input-error",!valid);
                        }
                        return valid;
                    }},
                height: {value: 0}
            },
            inputs:1,
            outputs:1,
            icon: ICON,
            paletteLabel: NAME,
            label: function() { return this.name || NAME; },
            oneditprepare: function() {
                $("#node-input-size").elementSizer({
                    width: "#node-input-width",
                    height: "#node-input-height",
                    group: "#node-input-group"
                });
            },
            oneditsave: function() {
            },
            oneditresize: function(size) {
            }
        };
        return conf;
    };

    RED.nodes.registerType('ui_{{&nodeName}}', mk_conf('{{&nodeName}}'));
</script>
