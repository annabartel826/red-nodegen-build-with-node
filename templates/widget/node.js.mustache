/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function(RED) {

    var TEMPLATE_SCOPE = "{{&template_scope}}";
    var TEMPLATE = '{{&func}}';
    var STORE_OUT_MSGS = {{&store_out_msgs}};
    var FWD_IN_MSGS = {{&fwd_in_msgs}};

    var ui = undefined;
    
    function TemplateNode(config) {
        if(ui === undefined) {
            // var base = RED.nodes.getDashboardPath();
            var base = process.env["NR_DASHBOARD_DIR"];
            ui = require(base+'/ui')(RED);
        }
        RED.nodes.createNode(this, config);
        var node = this;
        var group = RED.nodes.getNode(config.group);
        if (!group && TEMPLATE_SCOPE !== 'global') { return; }
        var tab = null;
        if (TEMPLATE_SCOPE !== 'global') {
            tab = RED.nodes.getNode(group.config.tab);
            if (!tab) { return; }
            if (!config.width) {
                config.width = group.config.width;
            }
        }
        var hei = Number(config.height || 0);
        var done = ui.add({
            forwardInputMessages: FWD_IN_MSGS,
            storeFrontEndInputAsState: STORE_OUT_MSGS,
            emitOnlyNewValues: false,
            node: node,
            tab: tab,
            group: group,
            control: {
                type: 'template',
                order: config.order,
                width: config.width || 6,
                height: hei,
                format: TEMPLATE,
                templateScope: TEMPLATE_SCOPE
            },
            beforeEmit: function(msg, value) {
                var properties = Object.getOwnPropertyNames(msg).filter(function (p) { return p[0] != '_'; });
                var clonedMsg = {
                    templateScope: TEMPLATE_SCOPE
                };
                for (var i=0; i<properties.length; i++) {
                    var property = properties[i];
                    clonedMsg[property] = msg[property];
                }
                return { msg:clonedMsg };
            },
            beforeSend: function (msg, original) {
                if (original) { return original.msg; }
            }
        });
        node.on("close", done);
    }
    RED.nodes.registerType('ui_{{&nodeName}}', TemplateNode);
};
